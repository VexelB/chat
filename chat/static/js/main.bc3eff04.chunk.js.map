{"version":3,"sources":["index.js"],"names":["ConErr","React","Component","Room","props","state","value","users","msg","handleChange","bind","handleSubmit","event","this","setState","target","ws","send","JSON","stringify","nick","preventDefault","id","map","v","i","key","onSubmit","type","onChange","autoFocus","onmessage","d","console","log","data","temp","parse","login","del","splice","indexOf","text","now","Date","getHours","getMinutes","toString","padStart","Loginer","document","location","hash","window","history","pushState","Math","random","substring","room","ReactDOM","render","path","component","getElementById","WebSocket","onclose","e","code"],"mappings":"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","file":"static/js/main.bc3eff04.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {HashRouter, Route, Switch} from 'react-router-dom'\n\n//компонент для отображения при невозможности установить соединение с сервером\nclass ConErr extends React.Component {\n  render() {\n    return (\n      <div>\n      Сервер недоступен. Проверьте подключение и попробуйте снова.\n      </div>\n    );\n  }\n}\n\n//основной компонент с комнатой\nclass Room extends React.Component {\n  constructor(props) {\n    super(props);\n    //хранилище состояний для значения input для сообщение, пользователей в комнате, сообщений\n    this.state = {value: '', users: [], msg: []};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  //реактивное изменение состояния input\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  //собтие отправки сообщения\n  handleSubmit(event) {\n    //если сообщение не пустое, то она отправляется на сервер\n    if (this.state.value !== ''){\n      ws.send(JSON.stringify({'nick': nick, 'text': this.state.value}));\n      this.setState({value: ''});\n    }\n    //предотвращение попытки страницы обновиться и отправить форму своими силами\n    event.preventDefault();\n  }\n\n  render() {\n    //макет комнаты для рендера, навешивание событий на объекты и расстановка объектов состояний\n    return (\n      <div id = \"all\">\n        <div id = \"messagescon\">\n        <div id = \"messages\">\n        <div id = \"msg\">\n        {this.state.msg.map((v,i) => <p key={i}>{v}</p>)}\n        </div>\n        </div>\n        <div id = \"sender\">\n          <form onSubmit={this.handleSubmit}>\n          <input type = \"text\" value = {this.state.value} onChange={this.handleChange} autoFocus={true}/>\n          <input type = \"submit\" value=\"Отправить\"/>\n          </form>\n        </div>\n        </div>\n        <div id = \"users\"> Пользователи:\n        <ul>{this.state.users.map((v,i) => <li key={i}>{v}</li>)}</ul><br/>\n        </div>\n      </div>\n    );\n  }\n\n  //функция после полного обновления DOM дерева\n  componentDidMount() {\n    //прием сообщений с сервера, парсинг и вывод необходимых\n    ws.onmessage = (d) => {\n      console.log(d.data);\n      let temp = JSON.parse(d.data)\n      if (temp.login){\n        //запись новых пользователей\n        let users = [...this.state.users, temp.login];\n        this.setState({users});\n      }\n      if (temp.del){\n        //удаление вышедших пользователей\n        let users = this.state.users;\n        users.splice(users.indexOf(temp.del,0),1);\n        this.setState({users});\n      }\n      if (temp.text){\n        //добавление новых сообщений, вывод времени, ника отправителя и тела сообщения\n        let now = new Date();\n        let msg = [now.getHours()+':'+now.getMinutes().toString().padStart(2,'0')+' '+temp.nick + ': ' + temp.text, ...this.state.msg]\n        this.setState({msg});\n      }\n    };\n  }\n}\n\n//компонент встречающий пользователя и просящий ввести ник\nclass Loginer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //создание комнаты при условии, что она не введена в адресной строке\n    if (document.location.hash === '#/')\n    {\n      window.history.pushState(null, null, document.location+Math.random().toString(36).substring(2, 7) );\n    };\n  }\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  //отправка логинящего сообщения на сервер и перенаправление в комнату\n  handleSubmit(event) {\n    if (this.state.value !== ''){\n      nick = this.state.value;\n      this.setState({value: ''});\n      ws.send(JSON.stringify({login: nick, room: document.location.hash}));\n    }\n    ReactDOM.render((\n      <HashRouter>\n        <Switch>\n          <Route path ='/' component={Room}/>\n        </Switch>\n      </HashRouter>\n    ), document.getElementById('root'))\n    event.preventDefault();\n  }\n\n  render () {\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n      <input type = \"text\" value = {this.state.value} onChange={this.handleChange} autoFocus={true}/>\n      <input type = \"submit\" value=\"Отправить\"/>\n      </form>\n      </div>\n    );\n  }\n}\n//глобальные переменные, хранящие в себе ник пользователя и сервер с которым идет связь\nlet nick = '';\nconst ws = new WebSocket (\"ws://94.103.88.200:8080\")\n\n//отрисовка сообщения об ошибке, если сервер недоступен\nws.onclose = (e) => {\n  console.log(e.code)\n  if (e.code == '1006') {\n    ReactDOM.render(\n      <ConErr/>,\n      document.getElementById('root')\n    );\n  }\n}\n\n//основной рендер при заходе на страницу, обработка пути и отрисовка логинера\nReactDOM.render((\n  <HashRouter>\n    <Switch>\n      <Route path ='/'component={Loginer}/>\n      <Route path ='' component={Loginer}/>\n    </Switch>\n  </HashRouter>\n), document.getElementById('root'))\n"],"sourceRoot":""}